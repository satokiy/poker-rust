//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use super::sea_orm_active_enums::Enum;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "game")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub status: Enum,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::deck::Entity")]
    Deck,
    #[sea_orm(has_many = "super::game_player::Entity")]
    GamePlayer,
}

impl Related<super::deck::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Deck.def()
    }
}

impl Related<super::game_player::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GamePlayer.def()
    }
}

impl Related<super::player::Entity> for Entity {
    fn to() -> RelationDef {
        super::game_player::Relation::Player.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::game_player::Relation::Game.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
